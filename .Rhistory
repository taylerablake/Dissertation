paste0(K,"-nearest neighbour"), axes=FALSE)
points(x, col=ifelse(g==1, "coral", "cornflowerblue"))
gd <- expand.grid(x=px1, y=px2)
points(gd, pch=".", cex=1.2, col=ifelse(probs>0.5, "coral", "cornflowerblue"))
p %<a-%box()
ghat <- ifelse(knn(x,x,k=K, cl=g)=="1", 1, 0)
error.rate <- 1- (sum(ghat==g)/length(g))
return(list(p=p,error.rate=error.rate))
}
knn.f(2)
#########################################################################################################################
#########################################################################################################################
err.rate <- function(K){
return(knn.f(K)$error.rate)
}
knn.f(2)
x <- mixture.example$x
g <- mixture.example$y
xnew <- mixture.example$xnew
px1 <- mixture.example$px1
px2 <- mixture.example$px2
knnFit <- knn(x, xnew, g, k=1, prob=TRUE)
prob <- attr(knnFit, "prob") ## this is the probability associated with the predicted class
prob <- ifelse(knnFit=="1", prob, 1-prob) ## standardize to probability of class 1
probs <- matrix(prob, length(px1), length(px2))
par(mar=rep(2,4))
contour(px1, px2, probs, levels=0.5, labels="", xlab="", ylab="", main=
paste0(K,"-nearest neighbour"), axes=FALSE)
points(x, col=ifelse(g==1, "coral", "cornflowerblue"))
gd <- expand.grid(x=px1, y=px2)
points(gd, pch=".", cex=1.2, col=ifelse(probs>0.5, "coral", "cornflowerblue"))
K <- 1
contour(px1, px2, probs, levels=0.5, labels="", xlab="", ylab="", main=
paste0(K,"-nearest neighbour"), axes=FALSE)
points(x, col=ifelse(g==1, "coral", "cornflowerblue"))
gd <- expand.grid(x=px1, y=px2)
points(gd, pch=".", cex=1.2, col=ifelse(probs>0.5, "coral", "cornflowerblue"))
help(jpg)
jpeg()
help(jpeg)
getwd()
list.dirs(getwd())
list.dirs(file.path(getwd(),"Panther")
)
setwd("/Users/taylerblake/Code/Tutorials/kNN")
setwd("/Users/taylerblake/Code/Panther/Tutorials/kNN")
mix.train <- mvrnorm(500, c(0,0), 0.2*diag(2))
dim(mix.train)
centers <- cbind(c(rep(1,250),rep(2,250)),c(rep(2,250),rep(1,250)))
mix.train + centers
data.frame(g=c(rep("1",250),rep("0",250)),
x1=(mix.train + centers)[,1],
x2=(mix.train + centers)[,2])
train.df <- data.frame(g=c(rep("1",250),rep("0",250)),
x1=(mix.train + centers)[,1],
x2=(mix.train + centers)[,2])
help(plot)
head(df)
head(train.df)
g <- train.df$g
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="")
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"))
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".", cex=1.2,)
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="")
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".", cex=2.2,)
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".")
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".",cex=3)
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="",main="training set")
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".",cex=3)
eps <-  mvrnorm(1, c(0,0), 0.2*diag(2))
xnew <- ifelse(runif(n=1)<0.5,eps + c(1,2),eps + c(2,1))
xnew
g <- ifelse(runif(n=1)<0.5,1,0)
g*c(1,2)
(1-g)*c(2,1)
g <- ifelse(runif(n=1)<0.5,1,0)
eps <-  mvrnorm(1, c(0,0), 0.2*diag(2))
xnew <- eps + g*c(1,2) + (1-g)*c(2,1)
demo("colors")
help(points)
points(xnew,col="gray42",pch=21)
g <- ifelse(runif(n=1)<0.5,1,0)
eps <-  mvrnorm(1, c(0,0), 0.2*diag(2))
xnew <- eps + g*c(1,2) + (1-g)*c(2,1)
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="",
main="training set",xlim=c(xnew[1]-0.4,xnew[1]+0.4),ylim=c(xnew[2]-0.4,xnew[2]+0.4))
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".",cex=3)
points(xnew,col="gray42",pch=21)
xnew
centers <- cbind(c(rep(1,500),rep(2,500)),c(rep(2,500),rep(1,500)))
mix.train <- mvrnorm(1000, c(0,0), 0.2*diag(2))
train.df <- data.frame(g=c(rep("1",500),rep("0",500)),
x1=(mix.train + centers)[,1],
x2=(mix.train + centers)[,2])
g <- train.df$g
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="",main="training set")
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".",cex=3)
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="",main="training set")
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".",cex=2)
points(xnew,col="gray42",pch=21)
xnew
points(xnew[1],xnew[2],col="gray42",pch=21)
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="",main="training set")
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".",cex=2)
points(xnew[1],xnew[2],col="gray42",pch=21)
xnew <- c(1.4,1.6)
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="",main="training set")
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".",cex=2)
points(xnew[1],xnew[2],col="gray42",pch=21)
xnew <- c(1.3,1.7)
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="",main="training set")
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".",cex=2)
points(xnew[1],xnew[2],col="gray42",pch=21)
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="",
main="training set",xlim=c(1,1.6),ylim=c(1.4,2))
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".",cex=2)
points(xnew[1],xnew[2],col="gray42",pch=21)
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="",
main="training set",xlim=c(1.1,1.5),ylim=c(1.5,1.9))
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".",cex=2)
points(xnew[1],xnew[2],col="gray42",pch=21)
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="",
xlim=c(1.1,1.5),ylim=c(1.5,1.9))
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".",cex=2)
points(xnew[1],xnew[2],col="gray42",pch=19)
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=19,cex=2.2)
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=19,cex=0.9)
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="")
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=19,cex=0.9)
points(xnew[1],xnew[2],col="gray42",pch=21)
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=19,cex=0.2)
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="")
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=19,cex=0.2)
points(xnew[1],xnew[2],col="gray42",pch=21)
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="",
xlim=c(1.1,1.5),ylim=c(1.5,1.9))
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=19,cex=0.4)
points(xnew[1],xnew[2],col="gray42",pch=19)
rbind(train.df[,-1],xnew)
dist(rbind(train.df[,-1],xnew))
dist.mat <- as.matrix(dist(rbind(train.df[,-1],xnew)))
help(dist.mat)
help(dist)
dist.mat <- as.matrix(dist(rbind(train.df[,-1],xnew),upper=TRUE,diag=TRUE))
dist[1,-1]
dist.mat[1,-1]
dist.mat[1,-1] %>% rank
ranked.dist <- dist.mat[1,-1] %>% rank
which(ranked.dist==1)
which(ranked.dist==1)+1
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="",
xlim=c(1.1,1.5),ylim=c(1.5,1.9))
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=19,cex=0.4)
points(xnew[1],xnew[2],col="gray42",pch=19)
hist(dist.mat)
set.seed(123)
centers <- c(sample(1:10, 5000, replace=TRUE),
sample(11:20, 5000, replace=TRUE))
means <- mixture.example$means
means <- means[centers, ]
mix.test <- mvrnorm(10000, c(0,0), 0.2*diag(2))
mix.test <- mix.test + means
cltest <- c(rep(0, 5000), rep(1, 5000))
ks <- c(1,3,5,7,9,11,15,17,23,25,35,45,55,83,101,151 )
# nearest neighbours to try
nks <- length(ks)
misclass.train <- numeric(length=nks)
misclass.test  <- numeric(length=nks)
names(misclass.train) <- names(misclass.test) <- ks
for (i in seq(along=ks)) {
mod.train <- knn(x,x,k=ks[i],cl=g)
mod.test  <- knn(x, mix.test,k= ks[i],cl= g)
misclass.train[i] <- 1 - sum(mod.train==factor(g))/200
misclass.test[i] <- 1 - sum(mod.test==factor(cltest))/10000
}
print(cbind(misclass.train, misclass.test))
# Using package mclust02  # Note that this package is no longer on CRAN,
#                           but must be searched in the archives.
## Not run:
if(require(mclust02)){
x <- mixture.example$x
g <- mixture.example$y
xnew <- mixture.example$xnew
px1 <- mixture.example$px1
px2 <- mixture.example$px2
mix.mclust <- mclustDA(x, g, xnew, G=1:6, verbose=TRUE)
mix.mclust
} # end require (mclust02)
## End(Not run) # end \dontrun
# Figure 2.4
plot(misclass.train,xlab="Number of NN",ylab="Test error",type="n",xaxt="n")
axis(1, 1:length(ks), as.character(ks))
lines(misclass.test,type="b",col='blue',pch=20)
lines(misclass.train,type="b",col='red',pch=20)
legend("bottomright",lty=1,col=c("red","blue"),legend = c("train ", "test "))
#Figure 2.5
prob<-mixture.example$prob
prob.bayes <- matrix(prob, length(px1), length(px2))
contour(px1, px2, prob.bayes, levels=0.5, labels="", xlab="x1",
ylab="x2",
main="Bayes decision boundary")
points(x, col=ifelse(g==1, "red", "green"))
set.seed(123)
centers <- c(sample(1:10, 5000, replace=TRUE),
sample(11:20, 5000, replace=TRUE))
means <- mixture.example$means
means <- means[centers, ]
mix.test <- mvrnorm(10000, c(0,0), 0.2*diag(2))
mix.test <- mix.test + means
cltest <- c(rep(0, 5000), rep(1, 5000))
ks <- c(1,3,5,7,9,11,15,17,23,25,35,45,55,83,101,151 )
# nearest neighbours to try
nks <- length(ks)
misclass.train <- numeric(length=nks)
misclass.test  <- numeric(length=nks)
names(misclass.train) <- names(misclass.test) <- ks
x <- mixture.example$x
g <- mixture.example$y
for (i in seq(along=ks)) {
mod.train <- knn(x,x,k=ks[i],cl=g)
mod.test  <- knn(x, mix.test,k= ks[i],cl= g)
misclass.train[i] <- 1 - sum(mod.train==factor(g))/200
misclass.test[i] <- 1 - sum(mod.test==factor(cltest))/10000
}
plot(misclass.train,xlab="Number of NN",ylab="Test error",type="n",xaxt="n")
axis(1, 1:length(ks), as.character(ks))
lines(misclass.test,type="b",col='blue',pch=20)
lines(misclass.train,type="b",col='red',pch=20)
legend("bottomright",lty=1,col=c("red","blue"),legend = c("train ", "test "))
dim(x)
N <- nrow(trees)
with(trees, {
## Girth is diameter in inches
symbols(Height, Volume, circles = Girth/24, inches = FALSE,
main = "Trees' Girth") # xlab and ylab automatically
## Colours too:
op <- palette(rainbow(N, end = 0.9))
symbols(Height, Volume, circles = Girth/16, inches = FALSE, bg = 1:N,
fg = "gray30", main = "symbols(*, circles = Girth/16, bg = 1:N)")
palette(op)
})
help(symbols)
which(ranked.dist<1)+1
which(ranked.dist<5)+1
which(ranked.dist<6)+1
which(ranked.dist==5)+1
dist.mat[1,which(ranked.dist==5)+1]
centers <- cbind(c(rep(1,500),rep(2,500)),c(rep(2,500),rep(1,500)))
mix.train <- mvrnorm(1000, c(0,0), 0.2*diag(2))
train.df <- data.frame(g=c(rep("1",500),rep("0",500)),
x1=(mix.train + centers)[,1],
x2=(mix.train + centers)[,2])
#train.df %>% ggplot(.,aes(x=x1,y=x2)) + geom_point(aes(colour=))
g <- train.df$g
dist.mat <- as.matrix(dist(rbind(train.df[,-1],xnew),upper=TRUE,diag=TRUE))
ranked.dist <- dist.mat[1,-1] %>% rank
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="",
main="training set",xlim=c(xnew[1]-0.4,xnew[1]+0.4),ylim=c(xnew[2]-0.4,xnew[2]+0.4))
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".",cex=3)
points(xnew,col="gray42",pch=21)
symbols(x=xnew[1], y = xnew[2], circles=dist.mat[1,which(ranked.dist==5)+1],fg="red")
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="",
main="training set",xlim=c(xnew[1]-0.4,xnew[1]+0.4),ylim=c(xnew[2]-0.4,xnew[2]+0.4))
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".",cex=3)
points(xnew,col="gray42",pch=21)
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="",
main="training set",xlim=c(1.1,1.5),ylim=c(1.4,1.9))
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".",cex=3)
points(xnew,col="gray42",pch=21)
symbols(x=xnew[1], y = xnew[2], circles=dist.mat[1,which(ranked.dist==5)+1],fg="red")
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="",
main="training set",xlim=c(1.1,1.5),ylim=c(1.4,1.9))
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".",cex=3)
points(xnew,col="gray42",pch=21)
points(xnew[1],xnew[2],col="gray42",pch=21)
symbols(x=xnew[1], y = xnew[2], circles=dist.mat[1,which(ranked.dist==5)+1],fg="red")
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="",
main="training set",xlim=c(1.1,1.5),ylim=c(1.4,1.9))
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".",cex=3)
points(xnew[1],xnew[2],col="gray42",pch=21)
symbols(x=xnew[1], y = xnew[2], circles=dist.mat[1,which(ranked.dist==5)+1],fg="red",inches=FALSE)
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="",
main="training set",xlim=c(1.1,1.5),ylim=c(1.4,1.9))
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".",cex=3)
points(xnew[1],xnew[2],col="gray42",pch=21)
install.packages("plotrix")
library(plotrix)
help("draw.circle")
plot(train.df$x1,train.df$x2, type="n",axes = FALSE,xlab="",ylab="",
main="training set",xlim=c(1.1,1.5),ylim=c(1.4,1.9))
points(train.df[,-1], col=ifelse(g==1, "coral", "cornflowerblue"),pch=".",cex=3)
points(xnew[1],xnew[2],col="gray42",pch=21)
draw.circle(x=xnew[1],y=xnew[2],radius=dist.mat[1,which(ranked.dist==5)+1],nv=200,border="red",col=NA,lty=1,lwd=1)
which(ranked.dist==5)
train.df[which(ranked.dist==5),]
train.df[which(ranked.dist==5),-1]
train.df[which(ranked.dist==5),-1] %>% rbind(xnew,.)
setwd(file.path("/Users","taylerblake","Documents","Dissertation"))
getwd()
list.dirs(getwd())
list.files(file.path(getwd(),"Dissertation TeX","img"))
filename = file.path(getwd(),"Dissertation TeX","img","bicubic_basis_function.png")
persp(M2.index, M1.index, z,
xlab = "", ylab = "", zlab = "",theta = 45, phi = 9,
shade = 0.55,col=color[facetcol],
box=TRUE,d=6,
ticktype = "detailed",
nticks=5,lty=2,border = NA,
cex.axis=0.5,ltheta=120,zlim=c(0,max(b+0.02)))
persp(M2.index, M1.index, z,
xlab = "", ylab = "", zlab = "",theta = 45, phi = 9,
shade = 0.55,col=color[facetcol],
box=TRUE,d=6,
ticktype = "detailed",
nticks=5,lty=2,border = NA,
cex.axis=0.5,ltheta=120,zlim=c(0,max(b+0.02)))-> res
for (i in seq(0.1,0.6,by=0.1)){
lines (trans3d(x=M1.index, y = 1, z = i, pmat = res),lty=3,col="gray84")
lines (trans3d(x=0, y = M1.index, z = i, pmat = res),lty=3,col="gray84")
}
for(i in seq(0.2,1,by=0.2)){
lines (trans3d(x=0, y = i, z = seq(0,max(b)+0.02,by=0.01), pmat = res),lty=3,col="gray84")
lines (trans3d(x=i, y = 1, z = seq(0,max(b)+0.02,by=0.01), pmat = res),lty=3,col="gray84")
}
lines(trans3d(x=0, y = M2.index, z = b, pmat = res))
lines(trans3d(x=M1.index, y = 1, z = b, pmat = res))
source(file.path(getwd(),"code","aux","bsplbase.R"))
library(plyr)
library(dplyr)
library(rlist)
library(ggplot2)
library(tidyr)
p1 <- p2 <- 200
M1.index <- M2.index <- seq(0,1,length.out=200)
oM1 <- outer(rep(1, p2),M1.index)
B1 <- bsplbase(as.vector(oM1), c(0,1,4,3))
oM2 <- outer(M2.index, rep(1, p1))
B2 <- bsplbase(as.vector(oM2), c(0,1,4,3))
n1 <- ncol(B1)
n2 <- ncol(B2)	# Compute tensor products for estimated alpha surface
B1. <- kronecker(B1, t(rep(1, n2)))
B2. <- kronecker(t(rep(1, n1)), B2)
B. <- B1. * B2.
dim(B.)
# Create a function interpolating colors in the range of specified colors
#jet.colors <- colorRampPalette( c("lightpink","dodgerblue") )
jet.colors <- colorRampPalette( c("deepskyblue2","green") )
# Generate the desired number of colors from this palette
nbcol <- 100
color <- jet.colors(nbcol)
# Compute the z-value at the facet centres
z <- matrix(B.[,25],nrow=length(M1.index),ncol=length(M1.index))
nrz <- nrow(z)
ncz <- ncol(z)
zfacet <- z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz]
# Recode facet z-values into color indices
facetcol <- cut(zfacet, nbcol)
par(bg="white")
b <- bsplbase(seq(0,1,length.out=200),c(0,1,4,3))[,4]
png(filename = file.path(getwd(),"Dissertation TeX","img","bicubic_basis_function.png"))
persp(M2.index, M1.index, z,
xlab = "", ylab = "", zlab = "",theta = 45, phi = 9,
shade = 0.55,col=color[facetcol],
box=TRUE,d=6,
ticktype = "detailed",
nticks=5,lty=2,border = NA,
cex.axis=0.5,ltheta=120,zlim=c(0,max(b+0.02)))
persp(M2.index, M1.index, z,
xlab = "", ylab = "", zlab = "",theta = 45, phi = 9,
shade = 0.55,col=color[facetcol],
box=TRUE,d=6,
ticktype = "detailed",
nticks=5,lty=2,border = NA,
cex.axis=0.5,ltheta=120,zlim=c(0,max(b+0.02)))-> res
for (i in seq(0.1,0.6,by=0.1)){
lines (trans3d(x=M1.index, y = 1, z = i, pmat = res),lty=3,col="gray84")
lines (trans3d(x=0, y = M1.index, z = i, pmat = res),lty=3,col="gray84")
}
for(i in seq(0.2,1,by=0.2)){
lines (trans3d(x=0, y = i, z = seq(0,max(b)+0.02,by=0.01), pmat = res),lty=3,col="gray84")
lines (trans3d(x=i, y = 1, z = seq(0,max(b)+0.02,by=0.01), pmat = res),lty=3,col="gray84")
}
lines(trans3d(x=0, y = M2.index, z = b, pmat = res))
lines(trans3d(x=M1.index, y = 1, z = b, pmat = res))
dim(B.)
oM1 <- outer(rep(1, p2),M1.index)
B1 <- bsplbase(as.vector(oM1), c(0,1,4,3))
source(file.path(getwd(),"code","aux","bsplbase.R"))
source(file.path(getwd(),"code","fnc","aux","bsplbase.R"))
p1 <- p2 <- 200
M1.index <- M2.index <- seq(0,1,length.out=200)
oM1 <- outer(rep(1, p2),M1.index)
B1 <- bsplbase(as.vector(oM1), c(0,1,4,3))
library(splines)
library(splines)
p1 <- p2 <- 200
M1.index <- M2.index <- seq(0,1,length.out=200)
oM1 <- outer(rep(1, p2),M1.index)
B1 <- bsplbase(as.vector(oM1), c(0,1,4,3))
oM2 <- outer(M2.index, rep(1, p1))
B2 <- bsplbase(as.vector(oM2), c(0,1,4,3))
n1 <- ncol(B1)
n2 <- ncol(B2)	# Compute tensor products for estimated alpha surface
B1. <- kronecker(B1, t(rep(1, n2)))
B2. <- kronecker(t(rep(1, n1)), B2)
B. <- B1. * B2.
dim(B.)
# Create a function interpolating colors in the range of specified colors
#jet.colors <- colorRampPalette( c("lightpink","dodgerblue") )
jet.colors <- colorRampPalette( c("deepskyblue2","green") )
nbcol <- 100
color <- jet.colors(nbcol)
# Compute the z-value at the facet centres
z <- matrix(B.[,25],nrow=length(M1.index),ncol=length(M1.index))
nrz <- nrow(z)
ncz <- ncol(z)
zfacet <- z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz]
# Recode facet z-values into color indices
facetcol <- cut(zfacet, nbcol)
par(bg="white")
b <- bsplbase(seq(0,1,length.out=200),c(0,1,4,3))[,4]
persp(M2.index, M1.index, z,
xlab = "", ylab = "", zlab = "",theta = 45, phi = 9,
shade = 0.55,col=color[facetcol],
box=TRUE,d=6,
ticktype = "detailed",
nticks=5,lty=2,border = NA,
cex.axis=0.5,ltheta=120,zlim=c(0,max(b+0.02)))
persp(M2.index, M1.index, z,
xlab = "", ylab = "", zlab = "",theta = 45, phi = 9,
shade = 0.55,col=color[facetcol],
box=TRUE,d=6,
ticktype = "detailed",
nticks=5,lty=2,border = NA,
cex.axis=0.5,ltheta=120,zlim=c(0,max(b+0.02)))
persp(M2.index, M1.index, z,
xlab = "", ylab = "", zlab = "",theta = 45, phi = 9,
shade = 0.55,col=color[facetcol],
box=TRUE,d=6,
ticktype = "detailed",
nticks=5,lty=2,border = NA,
cex.axis=0.5,ltheta=120,zlim=c(0,max(b+0.02)))-> res
for (i in seq(0.1,0.6,by=0.1)){
lines (trans3d(x=M1.index, y = 1, z = i, pmat = res),lty=3,col="gray84")
lines (trans3d(x=0, y = M1.index, z = i, pmat = res),lty=3,col="gray84")
}
for(i in seq(0.2,1,by=0.2)){
lines (trans3d(x=0, y = i, z = seq(0,max(b)+0.02,by=0.01), pmat = res),lty=3,col="gray84")
lines (trans3d(x=i, y = 1, z = seq(0,max(b)+0.02,by=0.01), pmat = res),lty=3,col="gray84")
}
lines(trans3d(x=0, y = M2.index, z = b, pmat = res))
lines(trans3d(x=M1.index, y = 1, z = b, pmat = res))
getwd()
file.path(getwd(),"Dissertation TeX")%>%list.dirs
png(filename = file.path(getwd(),"Dissertation TeX","img","bicubic_basis_function.png"))
persp(M2.index, M1.index, z,
xlab = "", ylab = "", zlab = "",theta = 45, phi = 9,
shade = 0.55,col=color[facetcol],
box=TRUE,d=6,
ticktype = "detailed",
nticks=5,lty=2,border = NA,
cex.axis=0.5,ltheta=120,zlim=c(0,max(b+0.02)))
persp(M2.index, M1.index, z,
xlab = "", ylab = "", zlab = "",theta = 45, phi = 9,
shade = 0.55,col=color[facetcol],
box=TRUE,d=6,
ticktype = "detailed",
nticks=5,lty=2,border = NA,
cex.axis=0.5,ltheta=120,zlim=c(0,max(b+0.02)))-> res
for (i in seq(0.1,0.6,by=0.1)){
lines (trans3d(x=M1.index, y = 1, z = i, pmat = res),lty=3,col="gray84")
lines (trans3d(x=0, y = M1.index, z = i, pmat = res),lty=3,col="gray84")
}
for(i in seq(0.2,1,by=0.2)){
lines (trans3d(x=0, y = i, z = seq(0,max(b)+0.02,by=0.01), pmat = res),lty=3,col="gray84")
lines (trans3d(x=i, y = 1, z = seq(0,max(b)+0.02,by=0.01), pmat = res),lty=3,col="gray84")
}
lines(trans3d(x=0, y = M2.index, z = b, pmat = res))
lines(trans3d(x=M1.index, y = 1, z = b, pmat = res))
dev.off()
file.path(getwd(),"Dissertation TeX",img)%>%list.files
file.path(getwd(),"Dissertation TeX","img")%>%list.files
help(persp.setup)
require(grDevices) # for colours
x <- -6:16
op <- par(mfrow = c(2, 2))
contour(outer(x, x), method = "edge", vfont = c("sans serif", "plain"))
z <- outer(x, sqrt(abs(x)), FUN = "/")
image(x, x, z)
contour(x, x, z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(x, x, z, ylim = c(1, 6), method = "simple", labcex = 1,
xlab = quote(x[1]), ylab = quote(x[2]))
contour(x, x, z, ylim = c(-6, 6), nlev = 20, lty = 2, method = "simple",
main = "20 levels; \"simple\" labelling method")
par(op)
b
contour(M1.index, M1.index, b, nlev = 10, lty = 2, method = "simple")
z
dim(B.)
dim(B1.)
dim(B1)
z <- outer(x, sqrt(abs(x)), FUN = "/")
dim(z)
length(x)
dim(B1.)
dim(B.)
z <- matrix(B.[,25],nrow=length(M1.index),ncol=length(M1.index))
contour(x=M1.index, y=M1.index, z, nlev = 10, lty = 2, method = "simple")
contour(x=M1.index, y=M1.index, z, nlev = 20, lty = 2, method = "simple")
contour(x=M1.index, y=M2.index, z, nlev = 20, lty = 2, method = "simple")
contour(x=M1.index, y=M2.index, z, nlev = 8, lty = 2, method = "simple")
