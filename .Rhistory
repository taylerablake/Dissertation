library(tissuesGeneExpression)
data(tissuesGeneExpression)
library(devtools)
library(magrittr)
library(zoo)
library(plyr)
library(dplyr)
library(ggplot2)
library(class)
library(doBy)
library(rlist)
library(lubridate)
library(tidyr)
library(infotheo)
library(stringr)
library(readr)
dist.mat <- e %>% t %>% dist(.,diag=TRUE,upper=TRUE) %>% as.matrix
dist.mat[3,45]
tissue[c(3,45)]
match(c("210486_at","200805_at"),rownames(e))
e[match(c("210486_at","200805_at"),rownames(e)),] %>% dist(.)
dim(e)
nrow(e)^2
e %>% t %>% dist %>% length
library(Biobase)
install_github("genomicsclass/Biobase",force=TRUE)
help(load)
load(url("https://github.com/genomicsclass/GSE5859/blob/master/data/GSE5859.rda"))
install.packages("RCurl")
install.packages("foreign")
library(foreign)
library(RCurl)
install.packages("repmis")
library(repmis)
load("/Users/taylerblake/Downloads/GSE5859.rda")
remove.packages("tissueGeneExpression")
remove.packages("tissuesGeneExpression")
source("http://bioconductor.org/biocLite.R")
biocLite("Biobase")
library(Biobase)
load("/Users/taylerblake/Downloads/GSE5859.rda")
ls()
class(tab)
dim(tab)
dim(tissue)
dim(e)
class(e)
library(GSE5859Subset)
data(GSE5859Subset)
source_data("https://github.com/genomicsclass/GSE5859Subset/blob/master/data/GSE5859Subset.rda")
source_data("https://github.com/genomicsclass/GSE5859Subset/blob/master/data/GSE5859Subset.rda?raw=true")
ls()
attributes(geneAnnotation)
ls()
attributes(geneExpression)
class(geneExpression)
dim(geneExpression)
y = geneExpression[,1:2]
y
dim(y)
head(y)
ggplot(data.frame(y),aes(x=GSM136508.CEL.gz,y=GSM136530.CEL.gz)) + geom_point() + theme_minimal()
s <- svd(y)
data(tissuesGeneExpression)
s = svd(e)
class(e)
as.matrix(e) %>% dim()
as.matrix(e) %>% head
dim(e)
head(e)
names(e)
experimentData(e) %>% class()
experimentData(e) %>% dim()
names(e)
dim(e)
attributes(e)
e$featureData %>% class()
attributes(e)$featureData %>% class()
attributes(e)$featureData %>% dim
attributes(e)
attributes(e)$assayData
attributes(e)$phenoData
dim(geneExpression)
data(tissuesGeneExpression)
library(tissuesGeneExpression)
data(tissuesGeneExpression)
class(geneExpression)
s = svd(geneExpression)
signflips = sample(c(-1,1),ncol(geneExpression),replace=TRUE)
signflips
head(e)
devtools::install_github("hadley/modelr")
install.packages("explore")
install.packages("classifly")
install.packages("clusterfy")
install.packages("meifly")
install.packages("clusterfly")
library(classifly)
data("olives")
head(olives)
install.packages("reshape2")
library(reshape)
library(reshape2)
data(smiths)
smiths
rm(smiths)
data("french_fries")
dim(french_fries)
head(french_fries)
length(unique(french_fries$subject))
table(french_fries$subject)
A <- matrix(data=c(-1,1 , 0.5,0.5 ), nrow=2,ncol=2,byrow=TRUE)
solve(A)
rm(A)
45*60*1000
(45*60*1000)+946689000000
(1*60*1000)+946689000000
((1*60*1000)+946689000000)+(45*60*1000)
946695600000+(180*60*1000)
install.packages("np")
library(np)
vignette("np_faq",package="np")
data("Italy")
head(Italy)
ggplot(Italy, aes(x=year,y=gdp)) + geom_point(colour="pink")
help(npregbw)
detach("package:BiocGenerics", unload=TRUE)
detach("package:BiocInstaller", unload=TRUE)
detach("package:Biobase", unload=TRUE)
set.seed(12345)
n <- 100000
x1 <- runif(n)
x2 <- runif(n)
y <- 1 + x1 + sin(pi*x2) + rnorm(n,sd=.1)
num.res <- 50
n.sub <- 250
bw.mat <- matrix(NA,nrow=num.res,ncol=2)
for(i in 1:num.res)  {
cat(paste(" Replication", i, "of", num.res, "...\r"))
bw.mat[i,] <- npregbw(y~x1+x2,regtype="ll",
subset=sample(n,n.sub))$sfactor$x
}
(60*60*1000)+946728630000
dim(bw.mat)
head(bw.mat)
bw <- apply(bw.mat,MARGIN=2,FUN=function(x){return(median(x,na.rm=TRUE))})
bw
model.res <- npreg(y~x1+x2,bws=bw,regtype="ll",bwscaling=TRUE)
X <- matrix(data=0,,nrow=10,ncol=2)
X <- matrix(data=0,nrow=10,ncol=2)
X <- matrix(data=0,nrow=10,ncol=2)
X[1,] <- c(9,1,0,0,0,0,0,0)
X[2,] <- c(17,1,0,0,0,0,0,0)
X[3,] <- c(9,0,1,0,0,0,0,0)
X[4,] <- c(10,0,0,1,0,0,0,0)
X[5,] <- c(11,0,0,0,1,0,0,0)
X[6,] <- c(12,0,0,0,0,1,0,0)
X[7,] <- c(17.5,0,0,0,0,0,1,0)
X[8,] <- c(14,0,0,0,0,0,0,1)
X[9,] <- c(15,1,0,0,0,0,0,0)
X[10,] <- c(17,1,0,0,0,0,0,0)
X <- matrix(data=0,nrow=10,ncol=8)
X[1,] <- c(9,1,0,0,0,0,0,0)
X[2,] <- c(17,1,0,0,0,0,0,0)
X[3,] <- c(9,0,1,0,0,0,0,0)
X[4,] <- c(10,0,0,1,0,0,0,0)
X[5,] <- c(11,0,0,0,1,0,0,0)
X[6,] <- c(12,0,0,0,0,1,0,0)
X[7,] <- c(17.5,0,0,0,0,0,1,0)
X[8,] <- c(14,0,0,0,0,0,0,1)
X[9,] <- c(15,1,0,0,0,0,0,0)
X[10,] <- c(17,1,0,0,0,0,0,0)
X
X <- matrix(data=0,nrow=10,ncol=8)
X[10,] <- c(9,1,0,0,0,0,0,0)
X[2,] <- c(17,1,0,0,0,0,0,0)
X[3,] <- c(9,0,1,0,0,0,0,0)
X[4,] <- c(10,0,0,1,0,0,0,0)
X[5,] <- c(11,0,0,0,1,0,0,0)
X[6,] <- c(12,0,0,0,0,1,0,0)
X[7,] <- c(17.5,0,0,0,0,0,1,0)
X[8,] <- c(14,0,0,0,0,0,0,1)
X[9,] <- c(15,1,0,0,0,0,0,0)
X[1,] <- c(17,1,0,0,0,0,0,0)
X
dist(X)
dist(X,upper=TRUE)[1,]
dist(X,upper=TRUE) %>% as.matrix
X[,1]
(X[,1] - min(X[,1]))/max(X[,1])
X[,1] <- (X[,1] - min(X[,1]))/max(X[,1])
dist(X,upper=TRUE) %>% as.matrix
X
X <- matrix(data=0,nrow=10,ncol=8)
X[10,] <- c(9,1,0,0,0,0,0,0)
X[2,] <- c(17,1,0,0,0,0,0,0)
X[3,] <- c(9,0,1,0,0,0,0,0)
X[4,] <- c(10,0,0,1,0,0,0,0)
X[5,] <- c(11,0,0,0,1,0,0,0)
X[6,] <- c(12,0,0,0,0,1,0,0)
X[7,] <- c(17.5,0,0,0,0,0,1,0)
X[8,] <- c(14,0,0,0,0,0,0,1)
X[9,] <- c(15,1,0,0,0,0,0,0)
X[1,] <- c(17,1,0,0,0,0,0,0)
X[,1] <- (X[,1] - 12)/24
dist(X,upper=TRUE) %>% as.matrix
X
X <- matrix(data=0,nrow=10,ncol=8)
X[10,] <- c(9,1,0,0,0,0,0,0)
X[2,] <- c(17,1,0,0,0,0,0,0)
X[3,] <- c(9,0,1,0,0,0,0,0)
X[4,] <- c(10,0,0,1,0,0,0,0)
X[5,] <- c(11,0,0,0,1,0,0,0)
X[6,] <- c(12,0,0,0,0,1,0,0)
X[7,] <- c(17.5,0,0,0,0,0,1,0)
X[8,] <- c(14,0,0,0,0,0,0,1)
X[9,] <- c(15,1,0,0,0,0,0,0)
X[1,] <- c(17,1,0,0,0,0,0,0)
X[,1] <- (X[,1])/24
X
dist(X,upper=TRUE) %>% as.matrix
distMat <- dist(X,upper=TRUE) %>% as.matrix
distMat[1,-1] %>% rank
distMat[1,-1] %>% rank %>% is_less_than(9) %>% which
X
X <- matrix(data=0,nrow=10,ncol=8)
X[10,] <- c(9,1,0,0,0,0,0,0)
X[2,] <- c(17,1,0,0,0,0,0,0)
X[3,] <- c(9,0,1,0,0,0,0,0)
X[4,] <- c(10,0,0,1,0,0,0,0)
X[5,] <- c(11,0,0,0,1,0,0,0)
X[6,] <- c(12,0,0,0,0,1,0,0)
X[7,] <- c(17.5,0,0,0,0,0,1,0)
X[8,] <- c(14,0,0,0,0,0,0,1)
X[9,] <- c(15,1,0,0,0,0,0,0)
X[1,] <- c(17,1,0,0,0,0,0,0)
X
X <- matrix(data=0,nrow=10,ncol=8)
X[1,] <- c(9,1,0,0,0,0,0,0)
X[2,] <- c(17,1,0,0,0,0,0,0)
X[3,] <- c(9,0,1,0,0,0,0,0)
X[4,] <- c(10,0,0,1,0,0,0,0)
X[5,] <- c(11,0,0,0,1,0,0,0)
X[6,] <- c(12,0,0,0,0,1,0,0)
X[7,] <- c(17.5,0,0,0,0,0,1,0)
X[8,] <- c(14,0,0,0,0,0,0,1)
X[9,] <- c(15,1,0,0,0,0,0,0)
X[10,] <- c(17,1,0,0,0,0,0,0)
X[,1] <- (X[,1])/24
X
distMat <- dist(X,upper=TRUE) %>% as.matrix
distMat[10,-1] %>% rank %>% is_less_than(9) %>% which
distMat[10,-10] %>% rank %>% is_less_than(9) %>% which
library(plyr)
library(dplyr)
library(rlist)
library(ggplot2)
library(tidyr)
library(splines)
library(reshape2)
library(systemfit)
require(graphics)
library(latex2exp)
p1 <- p2 <- 200
M1.index <- M2.index <- seq(0,1,length.out=200)
oM1 <- outer(rep(1, p2),M1.index)
B1 <- bsplbase(as.vector(oM1), c(0,1,4,3))
oM2 <- outer(M2.index, rep(1, p1))
B2 <- bsplbase(as.vector(oM2), c(0,1,4,3))
n1 <- ncol(B1)
n2 <- ncol(B2)	# Compute tensor products for estimated alpha surface
B1. <- kronecker(B1, t(rep(1, n2)))
B2. <- kronecker(t(rep(1, n1)), B2)
B. <- B1. * B2.
dim(B.)
setwd(file.path("/Users","taylerblake","Documents","Dissertation"))
source(file.path(getwd(),"code","fnc","aux","bsplbase.R"))
source(file.path(getwd(),"code","fnc","draw_psplines.R"))
p1 <- p2 <- 200
M1.index <- M2.index <- seq(0,1,length.out=200)
oM1 <- outer(rep(1, p2),M1.index)
B1 <- bsplbase(as.vector(oM1), c(0,1,4,3))
oM2 <- outer(M2.index, rep(1, p1))
B2 <- bsplbase(as.vector(oM2), c(0,1,4,3))
n1 <- ncol(B1)
n2 <- ncol(B2)	# Compute tensor products for estimated alpha surface
B1. <- kronecker(B1, t(rep(1, n2)))
B2. <- kronecker(t(rep(1, n1)), B2)
B. <- B1. * B2.
dim(B.)
# Create a function interpolating colors in the range of specified colors
jet.colors <- colorRampPalette( c("deepskyblue2","green") )
# Generate the desired number of colors from this palette
nbcol <- 100
color <- jet.colors(nbcol)
# Compute the z-value at the facet centres
z <- matrix(B.[,25],nrow=length(M1.index),ncol=length(M1.index))
nrz <- nrow(z)
ncz <- ncol(z)
zfacet <- z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz]
# Recode facet z-values into color indices
facetcol <- cut(zfacet, nbcol)
par(bg="white")
b <- bsplbase(seq(0,1,length.out=200),c(0,1,4,3))[,4]
persp(M2.index, M1.index, z,
xlab = "", ylab = "", zlab = "",theta = 45, phi = 9,
shade = 0.55,col=color[facetcol],
box=TRUE,d=6,
ticktype = "detailed",
nticks=5,lty=2,border = NA,
cex.axis=0.5,ltheta=120,zlim=c(0,max(b+0.02)))
persp(M2.index, M1.index, z,
xlab = "", ylab = "", zlab = "",theta = 45, phi = 9,
shade = 0.55,col=color[facetcol],
box=TRUE,d=6,
ticktype = "detailed",
nticks=5,lty=2,border = NA,
cex.axis=0.5,ltheta=120,zlim=c(0,max(b+0.02)))-> res
for (i in seq(0.1,0.6,by=0.1)){
lines (trans3d(x=M1.index, y = 1, z = i, pmat = res),lty=3,col="gray84")
lines (trans3d(x=0, y = M1.index, z = i, pmat = res),lty=3,col="gray84")
}
for(i in seq(0.2,1,by=0.2)){
lines (trans3d(x=0, y = i, z = seq(0,max(b)+0.02,by=0.01), pmat = res),lty=3,col="gray84")
lines (trans3d(x=i, y = 1, z = seq(0,max(b)+0.02,by=0.01), pmat = res),lty=3,col="gray84")
}
lines(trans3d(x=0, y = M2.index, z = b, pmat = res))
lines(trans3d(x=M1.index, y = 1, z = b, pmat = res))
dim(M1.index)
length(M1.index)
help(cloud)
