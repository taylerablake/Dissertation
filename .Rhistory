var.c <- t(half.sw) %*% half.sw
half.lunch <- half.sw %*% t(B.)
ones <- 0 * y + 1
var.Ahat <- ones %*% (half.lunch * half.lunch)
stdev.Ahat <- sqrt(dispersion.parm) * t(sqrt(var.Ahat))
pivot <- 2 * stdev.Ahat
upper <- A.hat + pivot
lower <- A.hat - pivot
L.hatm <- matrix(lower, R, R, byrow = T)
U.hatm <- matrix(upper, R, R, byrow = T)
persp(oS[1,  ], ot[, 1], U.hatm, xlab = x.lab, ylab =
y.lab, zlab = "2 se Upper Surface")
if(image.plot) {
image(oS[1,  ], ot[, 1], U.hatm, xlab = x.lab,
ylab = y.lab, sub = "2 se Upper Surface")
#, nlevels = 7)
}
persp(oS[1,  ], ot[, 1], L.hatm, xlab = x.lab, ylab =
y.lab, zlab = "2 se Lower Surface")
if(image.plot) {
image(oS[1,  ], ot[, 1], L.hatm, xlab = x.lab,
ylab = y.lab, sub = "2 se Lower Surface")
#, nlevels = 7)
}
}
}
# Prediction
summary.predicted <- NULL
cv.predicted <- eta.predicted <- avediff.pred <- NULL
if(!missing(t.pred)) {
q <- length(t.pred)
Up <- as.matrix(S.pred) %*% Bx
Byp <- bsplbase(t.pred, Pars[2,  ])
B1p <- kronecker(Up, t(rep(1, n2)))
B2p <- kronecker(t(rep(1, n1)), Byp)
Qp <- B1p * B2p
if(!int) {
eta.predicted <- Qp %*% pcoef
var.pred <- Qp %*% var.c %*% t(Qp)
}
}
if(int) {
var.c <- t(bread) %*% t(half.meat) %*% half.meat %*% bread
one.xpred.b <- cbind(rep(1, q), Qp)
eta.predicted <- Qp %*% pcoef[2:length(pcoef)] + yint
var.pred <- one.xpred.b %*% var.c %*% t(one.xpred.b)
}
stdev.pred <- as.vector(sqrt(diag(var.pred)))
stdev.pred <- sqrt(dispersion.parm) * stdev.pred
pivot <- as.vector(2 * stdev.pred)
upper <- eta.predicted + pivot
lower <- eta.predicted - pivot
summary.predicted <- cbind(lower, eta.predicted, upper)
if(!missing(y.predicted)) {
if(family == "gaussian") {
cv.predicted <- sqrt(sum((y.predicted - eta.predicted)^
2)/(length(y.predicted)))
avediff.pred <- (sum(y.predicted - eta.predicted))/
length(y.predicted)
}
}
bin.percent.correct <- NULL
if(link == "logit") {
summary.predicted <- 1/(1 + exp( - summary.predicted))
pcount <- 0
p.hat <- exp(eta.predicted)/(1 + exp(eta.predicted))
if(!missing(y.predicted)) {
for(ii in 1:length(eta.predicted)) {
if(p.hat[ii] > 0.5) {
count <- y.predicted[ii]
}
if(p.hat[ii] <= 0.5) {
count <- 1 - y.predicted[ii]
}
count <- pcount + count
pcount <- count
}
bin.percent.correct <- count/length(y.predicted)
}
}
if(link == "probit") {
summary.predicted <- apply(summary.predicted, c(1, 2), pnorm)
}
if(link == "cloglog") {
summary.predicted <- (1 - exp( - exp(summary.predicted)))
}
if(link == "loglog") {
summary.predicted <- exp( - exp( - summary.predicted))
}
if(link == "sqrt") {
summary.predicted <- summary.predicted^2
}
if(link == "log") {
summary.predicted <- exp(summary.predicted)
}
if(link == "recipical") {
summary.predd <- 1/(summary.predicted)
summary.predicted[, 1] <- summary.predd[, 3]
summary.predicted[, 3] <- summary.predd[, 1]
summary.predd <- NULL
}
summary.predicted <- as.matrix(summary.predicted)
dimnames(summary.predicted) <- list(NULL, c("-2std_Lower", "Predicted",
"+2std_Upper"))
P <- list(coef = pcoef, Pars = Pars, cv = cv, eff.dim = eff.dim, yint
= yint, int = int, bin.percent.correct = bin.percent.correct,
family, link, aic = aic, dev = dev, df.resid = m - trace,
dispersion.parm = dispersion.parm, mu = mu, press.mu = press.mu,
summary.predicted = summary.predicted, cv.predicted =
cv.predicted, eta.predicted = eta.predicted, avediff.pred =
avediff.pred, ridge.adj = ridge.adj)
P
}
"bsplbase"<-
function(x, bpars)
{
# Compute a B-spline basis
# Input:
#   x: abcissae
#   bpars: B-spline parameters: xmin, xmax, nseg, degree (= one less than "order")
# Output:
#   base: matrix with nrow = length(x) and nseg + degree columns
#
# Paul Eilers, 2000
dx <- (bpars[2] - bpars[1])/bpars[3]
knots <- seq(bpars[1] - bpars[4] * dx, bpars[2] + bpars[4] * dx, by =
dx)
base <- as.matrix(spline.des(knots, x, bpars[4] + 1, 0 * x)$design)
base
}
"pspline2d.checker"<-
function(family, link, degree1, degree2, order1, order2, ps.intervals1,
ps.intervals2, lambda1, lambda2, ridge.adj, wts)
{
if(link == "default" && family == "gaussian") {
link <- "identity"
}
if(link == "default" && family == "poisson") {
link <- "log"
}
if(link == "default" && family == "binomial") {
link <- "logit"
}
if(link == "default" && family == "Gamma") {
link <- "log"
}
if(family != "binomial" && family != "gaussian" && family != "poisson" &&
family != "Gamma") {
warning(paste("Improper FAMILY option. Choose: gaussian, poisson, binomial or Gamma"
))
}
if((family == "binomial") && (link != "logit" && link != "probit" &&
link != "cloglog" && link != "loglog")) {
warning(paste("Improper LINK option with family=binomial. Choose: logit, probit, loglog, cloglog"
))
}
if((family == "Gamma") && (link != "log" && link != "recipical" && link !=
"identity")) {
warning(paste("Improper LINK option with family=Gamma. Choose: recipical, log, identity"
))
}
if((family == "poisson") && (link != "log" && link != "sqrt" && link !=
"identity")) {
warning(paste("Improper LINK option with family=poisson. Choose: log, sqrt, identity"
))
}
if((family == "gaussian") && (link != "identity")) {
warning(paste("Improper LINK option with family=gaussian. Choose: identity"
))
}
if(degree1 < 0) {
degree1 <- 1
warning(paste("degree1 must be non-neg integer: have used 1"))
}
if(order1 < 0) {
order1 <- 0
warning(paste("order1 must be non-neg integer: have used 0"))
}
if(ps.intervals1 < 2) {
ps.intervals1 <- 2
warning(paste("ps.intervals1 must be positive integer, > 1: have used 2"
))
}
if(lambda1 < 0) {
lambda1 <- 0
warning(paste("lambda1 cannot be negative: have used 0"))
}
if(degree2 < 0) {
degree2 <- 1
warning(paste("degree2 must be non-neg integer: have used 1"))
}
if(order2 < 0) {
order2 <- 0
warning(paste("order2 must be non-neg integer: have used 0"))
}
if(ps.intervals2 < 2) {
ps.intervals2 <- 2
warning(paste("ps.intervals2 must be positive integer, > 1: have used 2"
))
}
if(lambda2 < 0) {
lambda2 <- 0
warning(paste("lambda2 cannot be negative: have used 0"))
}
if(ridge.adj < 0) {
ridge.adj <- 0
warning(paste("ridge.adj cannot be negative: have used 0"))
}
if(min(wts) < 0) {
warning(paste("At least one weight entry is negative"))
}
llist <- list(family = family, link = link, degree1 = degree1, order1
= order1, ps.intervals1 = ps.intervals1, lambda1 = lambda1,
degree2 = degree2, order2 = order2, ps.intervals2 =
ps.intervals2, lambda2 = lambda2, ridge.adj = ridge.adj, wts =
wts)
return(llist)
}
"pspline.fitter"<-
function(family, link, n.col, m.binomial, r.gamma, y, b, p, p.ridge, nix,
nix.ridge, ridge.adj, wts, ...)
{
coef.est <- rep(1, ncol(b))
if(family == "binomial") {
mu <- (y + 0.5 * m.binomial)/2
}
if(family == "Gamma" || family == "poisson") {
mu <- (y + 3)
}
if(family == "gaussian") {
mu <- rep(mean(y), length(y))
}
it <- 0
repeat {
if(it == 0) {
if(link == "identity") {
eta <- mu
}
if(link == "log") {
eta <- log(mu)
}
if(link == "sqrt") {
eta <- sqrt(mu)
}
if(link == "logit") {
eta <- log(mu/(m.binomial - mu))
}
if(link == "recipical") {
eta <- 1/mu
}
if(link == "probit") {
eta <- qnorm(mu/m.binomial)
}
if(link == "cloglog") {
eta <- log( - log(1 - mu/m.binomial))
}
if(link == "loglog") {
eta <-  - log( - log(mu/m.binomial))
}
}
it <- it + 1
if(it > 25)
break
if(link == "identity") {
mu <- eta
h.prime <- 1
}
if(link == "log") {
mu <- exp(eta)
h.prime <- mu
}
if(link == "sqrt") {
mu <- eta^2
h.prime <- 2 * eta
}
if(link == "logit") {
mu <- m.binomial/(1 + exp( - eta))
h.prime <- mu * (1 - mu/m.binomial)
}
if(link == "recipical") {
mu <- 1/eta
h.prime <-  - (mu^2)
}
if(link == "probit") {
mu <- m.binomial * pnorm(eta)
h.prime <- m.binomial * dnorm(eta)
}
if(link == "cloglog") {
mu <- m.binomial * (1 - exp( - exp(eta)))
h.prime <- (m.binomial) * exp(eta) * exp( - exp(eta))
}
if(link == "loglog") {
mu <- m.binomial * exp( - exp( - eta))
h.prime <- m.binomial * exp( - eta) * exp( - exp( - eta
))
}
if(family == "gaussian") {
w <- rep(1, length(y))
}
if(family == "poisson") {
w <- h.prime^2/mu
}
if(family == "binomial") {
w <- h.prime^2/(mu * (1 - mu/m.binomial))
}
if(family == "Gamma") {
w <- (r.gamma * h.prime^2)/mu^2
}
u <- (y - mu)/h.prime + eta
if(ridge.adj > 0) {
f <- lsfit(rbind(b, p, p.ridge), c(u, nix, nix.ridge),
wt = c(wts, nix + 1, nix.ridge + 1) * c(w, (nix +
1), (nix.ridge + 1)), intercept = F)
}
if(ridge.adj == 0) {
f <- lsfit(rbind(b, p), c(u, nix), wt = c(wts, nix + 1) *
c(w, (nix + 1)), intercept = F)
}
coef.old <- coef.est
coef.est <- as.vector(f$coef)
d.coef <- max(abs((coef.est - coef.old)/coef.old))
if(d.coef < 1e-008)
break
print(c(it, d.coef))
eta <- b %*% coef.est
}
if(it > 24) {
warning(paste("parameter estimates did NOT converge in 25 iterations"
))
}
llist <- list(coef = coef.est, mu = mu, f = f, w = w * wts)
return(llist)
}
psp2dU
y
X <- matrix(data=0,nrow=length(y)-1,ncol=length(y-1))
5:1
for(i in 1:nrow(X)){
X[i,] <- y[i:1]
}
X <- matrix(data=0,nrow=length(y)-1,ncol=length(y)-1)
for(i in 1:nrow(X)){
X[i,] <- y[i:1]
}
1:1
for(i in 1:nrow(X)){
X[i,1:i] <- y[i:1]
}
S.l <- (1:(length(y)-1))/(length(y)-1)
t <- 2:length(y)
s <- 1:(length(y)-1)
l <- t-s
m <- 0.5*(t+s)
l
t
X <- matrix(data=0,nrow=length(y)-1,ncol=length(y)-1)
for(i in 1:nrow(X)){
X[i,1:i] <- y[1:i]
}
S.t <- (2:(length(y)))/(length(y))
S.s <- (1:(length(y)-1))/(length(y)-1)
S.t
S.s
S.t
cbind(S.t,S.s) %*%matrix(data=c(1,-1, 0.5,0.5),nrow=2,ncol=2,byrow=TRUE)
y
X
S.index
Pars
fit <- psp2dU(y, S=X, S.index=S.t, t.var=S.s, Pars=Pars,
ridge.adj = 0, R = 50, x.lab = "t", y.lab = "s",
z.lab = "phi hat", coef.plot = T, image.plot = T,
se.bands = T, family = "gaussian", link = "default",
int = F)
Pars
S.t
S.s
Pars
Pars[1,1:2] <-c(min(S.t),max(S.t))
Pars[2,1:2] <-c(min(S.s),max(S.s))
fit <- psp2dU(y, S=X, S.index=S.t, t.var=S.s, Pars=Pars,
ridge.adj = 0, R = 50, x.lab = "t", y.lab = "s",
z.lab = "phi hat", coef.plot = T, image.plot = T,
se.bands = T, family = "gaussian", link = "default",
int = F)
dim(X)
length(S.t)
length(S.s)
fit <- psp2dU(y, S=X, S.index=S.t, t.var=S.s, Pars=Pars,
ridge.adj = 0, R = 49, x.lab = "t", y.lab = "s",
z.lab = "phi hat", coef.plot = T, image.plot = T,
se.bands = T, family = "gaussian", link = "default",
int = F)
X
X%*%S.index
X%*%S.t
S <- as.matrix(X)
Bx <- bsplbase(S.t, Pars[1,  ])
U <- S %*% Bx
By <- bsplbase(S.s, Pars[2,  ])
n1 <- ncol(Bx)
n2 <- ncol(By)	# Compute tensor products
n2
n1
SB1 <- kronecker(U, t(rep(1, n2)))
B2 <- kronecker(t(rep(1, n1)), By)
dim(SB1)
dim(B2)
Q <- SB1 * B2	#-----
d1 <- Pars[1, 6]
d1
D1 <- diag(n1)
for(j in 1:d1) {
D1 <- diff(D1)
}
lambda1 <- Pars[1, 5]
lambda1
P1 <- sqrt(lambda1) * kronecker(D1, diag(n2))
d2 <- Pars[2, 6]
D2 <- diag(n2)
if(d2 != 0) {
for(j in 1:d2) {
D2 <- diff(D2)
}
}
lambda2 <- Pars[2, 5]
P2 <- sqrt(lambda2) * kronecker(diag(n1), D2)
Pen <- rbind(P1, P2)
dim(Pen)
z1 <- rep(0, n2 * (n1 - d1))
z2 <- rep(0, n1 * (n2 - d2))
n.col <- ncol(Q)
dim(Q)
mu <- rep(mean(y[-1]), length(y[-1]))
it <- 0
eta <- mu
it <- it + 1
mu <- eta
h.prime <- 1
w <- rep(1, length(y))
w <- rep(1, length(y[-1]))
u <- (y - mu)/h.prime + eta
u <- (y[-1] - mu)/h.prime + eta
nix
z2
z1
nix = c(z1, z2),
nix = c(z1, z2)
f <- lsfit(rbind(Q, Pen), c(u, nix), wt = c(wts, nix + 1)*c(w, (nix + 1)), intercept = F)
coef.old <- coef.est
coef.est <- rep(1, ncol(Q))
coef.old <- coef.est
coef.est <- as.vector(f$coef)
coef.est
d.coef <- max(abs((coef.est - coef.old)/coef.old))
d.coef
eta <- Q %*% coef.est
eta <- mu
it <- it + 1
mu <- eta
h.prime <- 1
w <- rep(1, length(y[-1]))
u <- (y[-1] - mu)/h.prime + eta
nix = c(z1, z2)
f <- lsfit(rbind(Q, Pen), c(u, nix), wt = c(wts, nix + 1)*c(w, (nix + 1)), intercept = F)
coef.old <- coef.est
coef.est <- as.vector(f$coef)
d.coef <- max(abs((coef.est - coef.old)/coef.old))
d.coef
eta <- Q %*% coef.est
eta
repeat {
if(it == 0) {
if(link == "identity") {
eta <- mu
}
}
it <- it + 1
if(it > 25)
break
mu <- eta
h.prime <- 1
w <- rep(1, length(y[-1]))
u <- (y[-1] - mu)/h.prime + eta
nix = c(z1, z2)
f <- lsfit(rbind(Q, Pen), c(u, nix), wt = c(wts, nix + 1)*c(w, (nix + 1)), intercept = F)
coef.old <- coef.est
coef.est <- as.vector(f$coef)
d.coef <- max(abs((coef.est - coef.old)/coef.old))
if(d.coef < 1e-008)
break
print(c(it, d.coef))
eta <- Q %*% coef.est
}
eta
ls()
rm(Q.)
rm(U.)
ps.fit <- pspline.fitter(family="gaussian", link="identity", n.col, m.binomial, r.gamma, y[-1],
b=Q, Pen=Pen, p.ridge, nix = c(z1, z2), nix.ridge = rep(0, n1 * n2
), ridge.adj=NULL, wts=wts)
ps.fit <- pspline.fitter(family="gaussian", link="identity", n.col, m.binomial, r.gamma, y[-1],
b=Q, Pen=Pen, p.ridge, nix = c(z1, z2), nix.ridge = rep(0, n1 * n2
), ridge.adj=0, wts=wts)
pspline.fitter
rm(x)
pspline.fitter
n.col
ncol(Q)
ps.fit <- pspline.fitter(family="gaussian", link="identity", n.col, y[-1],
b=Q, Pen=Pen, p.ridge, nix = c(z1, z2), nix.ridge = rep(0, n1 * n2
), ridge.adj=0, wts=wts)
