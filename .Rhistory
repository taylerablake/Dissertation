df <- read.csv("CIV_GModel.csv",header=TRUE)
head(df)
df <- read.table("/Users/taylerblake/Downloads/sms-call-internet-tn-2013-11-16 2",header = TRUE)
df <- read.table("/Users/taylerblake/Downloads/sms-call-internet-tn-2013-11-16.txt",header = TRUE)
help("read.delim")
df <- read.delim("/Users/taylerblake/Downloads/sms-call-internet-tn-2013-11-16.txt",header = TRUE)
dim(df)
head(df)
rm(list=ls())
setwd(file.path("/Users","taylerblake","Documents","Dissertation"))
source(file.path(getwd(),"code","fnc","aux","bsplbase.R"))
library(plyr)
library(dplyr)
library(rlist)
library(ggplot2)
library(tidyr)
library(splines)
setwd(file.path("/Users","taylerblake","Documents","Dissertation"))
source(file.path(getwd(),"code","fnc","aux","bsplbase.R"))
library(plyr)
library(dplyr)
library(rlist)
library(ggplot2)
library(tidyr)
library(splines)
p1 <- p2 <- 200
M1.index <- M2.index <- seq(0,1,length.out=200)
oM1 <- outer(rep(1, p2),M1.index)
B1 <- bsplbase(as.vector(oM1), c(0,1,4,3))
oM2 <- outer(M2.index, rep(1, p1))
B2 <- bsplbase(as.vector(oM2), c(0,1,4,3))
n1 <- ncol(B1)
n2 <- ncol(B2)	# Compute tensor products for estimated alpha surface
B1. <- kronecker(B1, t(rep(1, n2)))
B2. <- kronecker(t(rep(1, n1)), B2)
B. <- B1. * B2.
dim(B.)
# Create a function interpolating colors in the range of specified colors
#jet.colors <- colorRampPalette( c("lightpink","dodgerblue") )
jet.colors <- colorRampPalette( c("deepskyblue2","green") )
# Generate the desired number of colors from this palette
nbcol <- 100
color <- jet.colors(nbcol)
# Compute the z-value at the facet centres
z <- matrix(B.[,25],nrow=length(M1.index),ncol=length(M1.index))
nrz <- nrow(z)
ncz <- ncol(z)
zfacet <- z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz]
# Recode facet z-values into color indices
facetcol <- cut(zfacet, nbcol)
par(bg="white")
b <- bsplbase(seq(0,1,length.out=200),c(0,1,4,3))[,4]
contour(x=M1.index, y=M2.index, z, nlev = 8, lty = 2, method = "simple")
contour(x=M1.index, y=M2.index, z, nlev = 8, lty = 2, method = "simple",xlim=c(0.1,0.9),ylim=c(0.1,0.9))
contour(x=M1.index, y=M2.index, z, nlev = 8, method = "simple",xlim=c(0,1),ylim=c(0,1))
contour(x=M1.index, y=M2.index, z, nlev = 8, xlim=c(0,1),ylim=c(0,1))
help(contour)
contour(x=M1.index, y=M2.index, z, nlev = 8, method="edge", xlim=c(0,1),ylim=c(0,1))
for(i in seq_along(seq(0.2,0.8,by=0.2))){
abline(v=i,lty=2)
abline(h=i,lty=2)
}
contour(x=M1.index, y=M2.index, z, nlev = 8, method="edge", xlim=c(0,1),ylim=c(0,1))
for(i in seq(0.2,0.8,by=0.2)){
abline(v=i,lty=2)
abline(h=i,lty=2)
}
contour(x=M1.index, y=M2.index, z, nlev = 8, method="edge", xlim=c(0,1),ylim=c(0,1))
for(i in seq(0.2,0.8,by=0.2)){
abline(v=i,lty=3,col="gray")
abline(h=i,lty=3,col="gray")
}
contour(x=M1.index, y=M2.index, z, nlev = 8, method="edge", xlim=c(0,1),ylim=c(0,1))
for(i in seq(0.2,0.8,by=0.2)){
abline(v=i,lty=3,col="lightgray")
abline(h=i,lty=3,col="lightgray")
}
png(filename = file.path(getwd(),"Dissertation TeX","img","bicubic_bspline_contour.png"))
contour(x=M1.index, y=M2.index, z, nlev = 8, method="edge", xlim=c(0,1),ylim=c(0,1))
for(i in seq(0.2,0.8,by=0.2)){
abline(v=i,lty=3,col="lightgray")
abline(h=i,lty=3,col="lightgray")
}
dev.off()
dat <- data.frame(company=c("Netflix","Amazon","LinkedIn","Stitchfix"),prop_rec=c(.75,.35,.5,1))
dat
help(geom_bar)
ggplot(dat,aes(x=company,y=prop_rec)) + geom_bar(stat="identity")
dev.off()
ggplot(dat,aes(x=company,y=prop_rec)) + geom_bar(stat="identity")
library(R.matlab)
library(magrittr)
library(plyr)
library(dplyr)
library(rlist)
library(lubridate)
library(tidyr)
library(infotheo)
library(ggplot2)
library(class)
library(doBy)
library(caret)
library(RSNNS)
setwd("/Users/taylerblake/Code/Panther/Phase-II/Discrete Choice Set Problems/External Data/MIT Reality Mining")
load("comm_20160704.RData")
startTSMinuteOfDay <- hour(comm$time_stamp_start)*60*60+minute(comm$time_stamp_start)*60+second(comm$time_stamp_start)
DoW <- wday(comm$time_stamp_start,label = TRUE)
comm <- transform(comm,startTSMinuteOfDay=startTSMinuteOfDay,
DoW=DoW)
rm(DoW)
rm(startTSMinuteOfDay)
comm <- orderBy(~mac + time_stamp_start,comm)
hashNum <- comm$hashNum
hashNum[comm$hashNum=="NaN" & comm$contact != "-1" & comm$direction=="Outgoing"] <- comm$contact[comm$hashNum=="NaN" & comm$contact != "-1" & comm$direction=="Outgoing"]
comm$hashNum <- NULL
comm <- transform(comm, hashNum=hashNum)
call_history <- subset(comm, mac=="61961078595" & description=="Voice call")
dayHourStart <- (call_history$time_stamp_start %>% hour(.)) +(call_history$time_stamp_start %>% minute(.) %>% divide_by(60))
call_history <- transform(call_history,dayHourStart=dayHourStart,
contact=factor(contact))
p <- ggplot(subset(call_history,direction=="Outgoing"),aes(x=wday(time_stamp_start),y=dayHourStart))
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("day of week") + ylab("time of day")
names(call_history)
trunc(call_history$time_stamp_start,"days")
p <- ggplot(subset(call_history,direction=="Outgoing"),aes(x=trunc(call_history$time_stamp_start,"days"),y=dayHourStart))
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day")
names(call_history)
p <- ggplot(subset(call_history,direction=="Outgoing"),aes(x=trunc(time_stamp_start,"days"),y=dayHourStart))
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day")
call_history$Do
help(geom_abline)
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day") + geom_abline(data=subset(call_history,direction=="Outgoing" & DoW=="Sun"),xintercept=trunc(time_stamp_start,"days"))
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day") + geom_abline(xintercept=trunc$subset(call_history,direction=="Outgoing" & DoW=="Sun")&time_stamp_start,"days"))
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day") + geom_abline(xintercept=trunc$subset(call_history,direction=="Outgoing" & DoW=="Sun")$time_stamp_start,"days"))
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day") + geom_abline(xintercept=trunc(subset(call_history,direction=="Outgoing" & DoW=="Sun")$time_stamp_start,"days"))
trunc(subset(call_history,direction=="Outgoing" & DoW=="Sun")$time_stamp_start,"days")
help("geom_abline")
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day") + geom_vline(xintercept=as.integer(trunc(subset(call_history,direction=="Outgoing" & DoW=="Sun")$time_stamp_start,"days")))
trunc(subset(call_history,direction=="Outgoing" & DoW=="Sun")$time_stamp_start,"days"))
trunc(subset(call_history,direction=="Outgoing" & DoW=="Sun")$time_stamp_start,"days")
trunc(subset(call_history,direction=="Outgoing" & DoW=="Sun")$time_stamp_start,"days")%>% class
as.Date(trunc(subset(call_history,direction=="Outgoing" & DoW=="Sun")$time_stamp_start,"days"),"%Y-%m-%d")
sundays <- as.integer(as.Date(trunc(subset(call_history,direction=="Outgoing" & DoW=="Sun")$time_stamp_start,"days"),"%Y-%m-%d"))
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day") + geom_vline(sundays)
sundays <- as.integer(as.Date(trunc(subset(call_history,direction=="Outgoing" & DoW=="Sun")$time_stamp_start,"days"),"%Y-%m-%d"))
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day") + geom_vline(xintercept=sundays)
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day") + geom_vline(xintercept=sundays,colour="blue")
sundays <- as.Date(trunc(subset(call_history,direction=="Outgoing" & DoW=="Sun")$time_stamp_start,"days"),"%Y-%m-%d")
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day") + geom_vline(xintercept=sundays,colour="blue")
sundays
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day") + geom_vline(xintercept=as.integer(sundays),colour="blue")
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day") + geom_vline(xintercept=as.numeric(sundays),colour="blue")
sundays
as.numeric(sundays)
p <- ggplot(subset(call_history,direction=="Outgoing"),aes(x=as.Date(trunc(time_stamp_start,"days"),"%Y-%m-%d"),y=dayHourStart))
sundays <- as.Date(trunc(subset(call_history,direction=="Outgoing" & DoW=="Sun")$time_stamp_start,"days"),"%Y-%m-%d")
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day") + geom_vline(xintercept=as.numeric(sundays),colour="blue")
help(geom_vline)
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day") + geom_vline(xintercept=as.numeric(sundays),colour="blue",alpha=0.5,linetype=2)
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day") + geom_vline(xintercept=as.numeric(sundays),colour="blue",alpha=0.5,linetype=3)
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day") + geom_vline(xintercept=as.numeric(sundays),alpha=0.5,linetype=3)
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day") + geom_vline(xintercept=as.numeric(sundays),alpha=0.6,linetype=3)
min(as.Date(trunc(call_history$time_stamp_start,"days"),"%Y-%m-%d"))
wday(min(as.Date(trunc(call_history$time_stamp_start,"days"),"%Y-%m-%d")))
help(seq)
call_history <- transform(call_history,dayHourStart=dayHourStart,
contact=factor(contact),
dateStart=as.Date(trunc(time_stamp_start,"days"),"%Y-%m-%d")))
call_history <- transform(call_history,dayHourStart=dayHourStart,
contact=factor(contact),
dateStart=as.Date(trunc(time_stamp_start,"days"),"%Y-%m-%d"))
max(call_history$dateStart)-min(call_history$dateStart)
as.numeric(max(call_history$dateStart)-min(call_history$dateStart))
as.numeric(max(call_history$dateStart)-min(call_history$dateStart))/7
seq.Date(from=min(call_history$dateStart),by="week",length.out=ceiling(as.numeric(max(call_history$dateStart)-min(call_history$dateStart))/7))
week.markers <- seq.Date(from=min(call_history$dateStart),by="week",length.out=ceiling(as.numeric(max(call_history$dateStart)-min(call_history$dateStart))/7))
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day") + geom_vline(xintercept=as.numeric(week.markers),alpha=0.6,linetype=3)
getwd()
save(call_history,file = file.path(getwd(),"Shiny Apps","single_user_call_history.RData"))
file.path(getwd(),"Shiny Apps","single_user_call_history.RData")
setwd("/Users/taylerblake/Code/Panther/Phase-II/Discrete Choice Set Problems/External Data/MIT Reality Mining/Shiny Apps")
install.packages("scatterD3")
library(scatterD3)
scatterD3(x = call_history$dateStart[call_history$direction=="Outgoing"],
y = call_history$dayHourStart[call_history$direction=="Outgoing"],
col_var = call_history$contact[call_history$direction=="Outgoing"])
call_history$dayHourStart[call_history$direction=="Outgoing"]
call_history$contact[call_history$direction=="Outgoing"]
scatterD3(x = as.numeric(call_history$dateStart[call_history$direction=="Outgoing"]),
y = call_history$dayHourStart[call_history$direction=="Outgoing"],
col_var = call_history$contact[call_history$direction=="Outgoing"])
install.packages("rjson")
library(rjson)
scatterD3(x = as.numeric(call_history$dateStart[call_history$direction=="Outgoing"]),
y = call_history$dayHourStart[call_history$direction=="Outgoing"],
col_var = call_history$contact[call_history$direction=="Outgoing"],
size_var=call_history$DoW[call_history$direction=="Outgoing"])
scatterD3(x = as.numeric(call_history$dateStart[call_history$direction=="Outgoing"]),
y = call_history$dayHourStart[call_history$direction=="Outgoing"],
col_var = call_history$contact[call_history$direction=="Outgoing"],
size_var=as.numeric(call_history$DoW[call_history$direction=="Outgoing"]))
scatterD3(x = as.numeric(call_history$dateStart[call_history$direction=="Outgoing"]),
y = call_history$dayHourStart[call_history$direction=="Outgoing"],
col_var = call_history$contact[call_history$direction=="Outgoing"],
size_var=as.numeric(call_history$DoW[call_history$direction=="Outgoing"]),
point_opacity = 0.6)
scatterD3(x = as.numeric(call_history$dateStart[call_history$direction=="Outgoing"]),
y = call_history$dayHourStart[call_history$direction=="Outgoing"],
col_var = call_history$contact[call_history$direction=="Outgoing"],
size_var=wday(call_history$time_stamp_start[call_history$direction=="Outgoing"]),
point_opacity = 0.6)
scatterD3(x = as.numeric(call_history$dateStart[call_history$direction=="Outgoing"]),
y = call_history$dayHourStart[call_history$direction=="Outgoing"],
col_var = call_history$contact[call_history$direction=="Outgoing"],
size_var=wday(call_history$time_stamp_start[call_history$direction=="Outgoing"]),
point_opacity = 0.6,
xlab = "",
ylab="time of day",
main="call history: hour of day vs date")
install.packages("shiny")
install.packages("shiny")
library(shiny)
runApp("simple_app")
runApp("simple_app")
help(wday)
library(shiny)
library(scatterD3)
library(magrittr)
library(plyr)
library(dplyr)
library(rlist)
library(lubridate)
library(tidyr)
library(infotheo)
library(ggplot2)
scatterD3(x = as.numeric(call_history$dateStart[call_history$direction=="Outgoing"]),
y = call_history$dayHourStart[call_history$direction=="Outgoing"],
col_var = call_history$contact[call_history$direction=="Outgoing"],
size_var=wday(call_history$time_stamp_start[call_history$direction=="Outgoing"]),
point_opacity = 0.6,
xlab = "",
ylab="time of day")
runApp("simple_app")
help("runApp")
runApp("simple_app")
dev.off()
dev.off()
runApp("simple_app")
runApp("simple_app")
runApp("simple_app")
getwd()
rm(list=ls())
library(shiny)
setwd("/Users/taylerblake/Code/Panther/Phase-II/Discrete Choice Set Problems/External Data/MIT Reality Mining/Shiny Apps")
library(shiny)
library(scatterD3)
library(magrittr)
library(plyr)
library(dplyr)
library(rlist)
library(lubridate)
library(tidyr)
library(infotheo)
library(ggplot2)
runApp("simple_app")
stopApp()
help("stopApp")
runApp("simple_app")
help(runApp)
runApp("simple_app",launch.browser = TRUE)
runApp("simple_app",launch.browser = TRUE)
help("scatterD3Output")
runApp("simple_app")
runApp("simple_app",launch.browser = TRUE)
runApp("simple_app",launch.browser = TRUE)
runApp("simple_app",launch.browser = TRUE)
library(ggplot2)
runApp("simple_app",launch.browser = TRUE)
p <- ggplot(subset(call_history,direction=="Outgoing"),aes(x=as.Date(trunc(time_stamp_start,"days"),"%Y-%m-%d"),y=dayHourStart))
setwd("/Users/taylerblake/Code/Panther/Phase-II/Discrete Choice Set Problems/External Data/MIT Reality Mining/Shiny Apps")
load("single_user_call_history.RData")
p <- ggplot(subset(call_history,direction=="Outgoing"),aes(x=as.Date(trunc(time_stamp_start,"days"),"%Y-%m-%d"),y=dayHourStart))
week.markers <- seq.Date(from=min(call_history$dateStart),by="week",length.out=ceiling(as.numeric(max(call_history$dateStart)-min(call_history$dateStart))/7))
p + geom_point(aes(colour=contact),alpha=0.6) + xlab("") + ylab("time of day") + geom_vline(xintercept=as.numeric(week.markers),alpha=0.6,linetype=3)
rm(p)
runApp("simple_app",launch.browser = TRUE)
runApp("simple_app",launch.browser = TRUE)
names(comm)
names(call_history)
runApp("simple_app",launch.browser = TRUE)
call_history$DoW
help("selectInput")
names(call_history)
runApp("simple_app",launch.browser = TRUE)
runApp("simple_app",launch.browser = TRUE)
help(runApp)
runApp("simple_app",launch.browser = TRUE)
runApp("simple_app",launch.browser = TRUE)
runApp("simple_app",launch.browser = TRUE)
runApp("simple_app",launch.browser = TRUE)
runApp("simple_app",launch.browser = TRUE)
runApp("simple_app",launch.browser = TRUE)
runApp("simple_app",launch.browser = TRUE)
runApp("simple_app",launch.browser = TRUE)
help("sliderInput")
names(call_history)
runApp("simple_app",launch.browser = TRUE)
runApp("simple_app",launch.browser = TRUE)
help(ggplt)
help(ggplot)
runApp("simple_app",launch.browser = TRUE)
runApp("simple_app",launch.browser = TRUE)
help("sliderInput")
runApp("simple_app",launch.browser = TRUE)
runApp("simple_app",launch.browser = TRUE)
library(rjson)
x <- toJSON( iris )
x
system.time( y <- fromJSON(x) )
getwd()
runApp("simple_app",launch.browser = TRUE)
install.packages("rscala")
library(rscala)
rscala::rscalaJar('2.11')
runApp("simple_app",launch.browser = TRUE)
runApp("simple_app",launch.browser = TRUE)
help("file.path")
ls
ls()
help("rjson")
plot(cars, pch=2)
head(cars)
json_cars <- toJSON(as.list(cars))
points( data.frame( fromJSON( json_cars ) ), col="red", pch=3
)
json_cars
as.list(call_history)
as.list(call_history) %>% toJSON()
json_call_history <- as.list(call_history) %>% toJSON()
library(readr)
getwd()
list.dirs(file.path("/Users/taylerblake/Code"))
list.dirs(file.path("/Users/taylerblake/Code/Panther"))
list.dirs(file.path("/Users/taylerblake/Code/IntuitionEngineRCode"))
file.path("/Users","taylerblake","Code","IntuitionEngineRCode","data")
file.path("/Users","taylerblake","Code","IntuitionEngineRCode","data") %>% list.files
save(json_call_history,file=file.path("/Users","taylerblake","Code","IntuitionEngineRCode","data","call_history.json"))
rm(json_call_history)
ls()
rm(x)
rm(y)
rm(week.markers)
rm(json_cars)
json_call_history <- fromJSON(file.path("/Users","taylerblake","Code","IntuitionEngineRCode","data","call_history.json"))
json_call_history <- fromJSON(file.path("Users","taylerblake","Code","IntuitionEngineRCode","data","call_history.json"))
toJSON(as.list(call_history))
toJSON(as.list(call_history[1:100,]))
json_call_history <- toJSON(as.list(call_history))
save(json_call_history,file=file.path("Users","taylerblake","Code","IntuitionEngineRCode","data","call_history.json"))
save(json_call_history,file=file.path("Users","taylerblake","Code","IntuitionEngineRCode","data","json_call_history.json"))
save(json_call_history,file=file.path("/Users","taylerblake","Code","IntuitionEngineRCode","data","json_call_history.json"))
file.path("/Users","taylerblake","Code","IntuitionEngineRCode","data","json_call_history.json") %>% list.files
file.path("/Users","taylerblake","Code","IntuitionEngineRCode","data") %>% list.files
file.path("/Users","taylerblake","Code","IntuitionEngineRCode","data") %>% list.files
file.path("/Users","taylerblake","Code","IntuitionEngineRCode","data","json_call_history.json")
fromJSON(file.path("/Users","taylerblake","Code","IntuitionEngineRCode","data","json_call_history.json"),
unexpected.escape = "skip")
file.path("/Users","taylerblake","Code","IntuitionEngineRCode","data","json_call_history.json")
getwd(file.path("/Users","taylerblake","Code","IntuitionEngineRCode","data","json_call_history.json"))
setwd(file.path("/Users","taylerblake","Code","IntuitionEngineRCode","data"))
json_call_history <- fromJSON("json_call_history.json",unexpected.escape = "skip")
json_call_history <- fromJSON(file="json_call_history.json",unexpected.escape = "skip")
json_call_history <- toJSON(as.list(call_history))
unjson_call_history <- fromJSON(json_call_history)
unjson_call_history
unjson_call_history %>% class
unjson_call_history <- data.frame(fromJSON(json_call_history))
unjson_call_history %>% class
unjson_call_history %>% head
help(detach)
detach("package:rjson",character.only = TRUE)
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
stream_in("json_call_history.json")
help("readLines")
detach("package:jsonlite",character.only = TRUE)
library(rjson)
stream_in(readLines("json_call_history.json"))
fromJSON(readLines("json_call_history.json"))
names(call_history)
json_call_history <- toJSON(as.list(call_history[,c("contact","direction","time_stamp_start","DoW","dayHourStart","dateStart")]))
save(json_call_history,file=file.path("/Users","taylerblake","Code","IntuitionEngineRCode","data","json_call_history.json"))
call_history[1:10,c("contact","direction","time_stamp_start","DoW","dayHourStart","dateStart")]
json_call_history <- toJSON(as.list(call_history[1:10,c("contact","direction","time_stamp_start","DoW","dayHourStart","dateStart")]))
save(json_call_history,file=file.path("/Users","taylerblake","Code","IntuitionEngineRCode","data","json_call_history.json"))
getwd()
help(file)
readLines(file("json_call_history.json","r"))
json_call_history
getwd()
setwd("/Users/taylerblake/Code/Panther/Phase-II/Discrete Choice Set Problems/External Data/MIT Reality Mining/Shiny Apps")
library(shiny)
library(scatterD3)
library(lubridate)
library(ggplot2)
library(rjson)
runApp("simple_app",launch.browser = TRUE)
detach("package:rjson",unload = TRUE)
jsoncars <- toJSON(mtcars, pretty=TRUE)
library(jsonlite)
library(jsonlite)
jsoncars <- toJSON(mtcars, pretty=TRUE)
jsoncars
toJSON(call_history[1:10,c("contact","direction","time_stamp_start","DoW","dayHourStart","dateStart")], pretty=TRUE)
json_call_history <- toJSON(call_history[1:10,c("contact","direction","time_stamp_start","DoW","dayHourStart","dateStart")], pretty=TRUE)
save(json_call_history,file=file.path("/Users","taylerblake","Code","IntuitionEngineRCode","data","json_call_history.json"))
file.path("/Users","taylerblake","Code","IntuitionEngineRCode","data") %>% list.files
library(magrittr)
file.path("/Users","taylerblake","Code","IntuitionEngineRCode","data") %>% list.files
getwd()
file.path(getwd(),data)
file.path(getwd(),"data")
file(file.path(getwd(),"data","json_call_history.json"))
stream_in(file(file.path(getwd(),"data","json_call_history.json")))
stream_in(file.path(getwd(),"data","json_call_history.json"))
stream_in(readLines(file(file.path(getwd(),"data","json_call_history.json"))))
stream_in(readLines(file(file.path(getwd(),"json_call_history.json"))))
getwd()
list.files(getwd())
save(json_call_history,file.path(getwd(),"json_call_history.json"))
json_call_history
save(json_call_history,file=file.path(getwd(),"json_call_history.json"))
readLines(file(file.path(getwd(),"json_call_history.json")))
stream_in(readLines(file(file.path(getwd(),"json_call_history.json"))))
stream_in(file(file.path(getwd(),"json_call_history.json")))
readLines(file(file.path(getwd(),"json_call_history.json")))
myjson <- toJSON(cars)
cat(myjson)
minify(myjson)
prettify(myjson)
toJSON(call_history[1:10,c("contact","direction","time_stamp_start","DoW","dayHourStart","dateStart")], pretty=TRUE)
toJSON(call_history[1:10,c("contact","direction","time_stamp_start","DoW","dayHourStart","dateStart")])
data1 <- fromJSON("https://api.github.com/users/hadley/orgs")
names(data1)
data1$login
rm(data1)
options(stringsAsFactors=FALSE)
x <- data.frame(driver = c("Bowser", "Peach"), occupation = c("Koopa", "Princess"))
x$vehicle <- data.frame(model = c("Piranha Prowler", "Royal Racer"))
x$vehicle$stats <- data.frame(speed = c(55, 34), weight = c(67, 24), drift = c(35, 32))
x
str(x)
str(flatten(x))
x <- call_history[1:10,c("contact","direction","time_stamp_start","DoW","dayHourStart","dateStart")]
toJSON(x, dataframe = "rows",Date = c("ISO8601"), POSIXt = c("string"), factor = c("string"),
complex = c("string", "list"), raw = c("base64", "hex", "mongo"),
null = "null", na = "string",
digits = 5, pretty = FALSE, force = FALSE)
json_x <- toJSON(x, dataframe = "rows",Date = c("ISO8601"), POSIXt = c("string"), factor = c("string"),
complex = c("string", "list"), raw = c("base64", "hex", "mongo"),
null = "null", na = "string",
digits = 5, pretty = FALSE, force = FALSE)
getwd()
file.path(getwd(),"json_x.json")
save(json_x,file=file.path(getwd(),"json_x.json"))
json_x <- toJSON(as.list(x), dataframe = "columns",Date = c("ISO8601"), POSIXt = c("string"), factor = c("string"),
complex = c("string", "list"), raw = c("base64", "hex", "mongo"),
null = "null", na = "string",
digits = 5, pretty = FALSE, force = FALSE)
save(json_x,file=file.path(getwd(),"json_x.json"))
readLines(file(file.path(getwd(),"json_x.json")))
toJSON(as.list(x), dataframe = "columns",Date = c("ISO8601"), POSIXt = c("string"), factor = c("string"),
complex = c("string", "list"), raw = c("base64", "hex", "mongo"),
null = "null", na = "string",
digits = 5, pretty = FALSE, force = FALSE)
setwd(file.path("/Users","taylerblake","Documents","Dissertation"))
source(file.path(getwd(),"code","fnc","aux","bsplbase.R"))
library(plyr)
library(dplyr)
library(rlist)
library(ggplot2)
library(tidyr)
library(splines)
p1 <- p2 <- 200
M1.index <- M2.index <- seq(0,1,length.out=200)
oM1 <- outer(rep(1, p2),M1.index)
B1 <- bsplbase(as.vector(oM1), c(0,1,4,3))
dim(B1)
oM1
oM1
oM1 %>% dim
bs(seq(0,1,length.out = 200), knots = seq(0,1,by=.1), degree = 3, intercept = FALSE,
Boundary.knots = range(x))
seq(0,1,length.out = 200)
help("spline.des")
spline.des(knots=seq(0,1,by=.1), x=seq(0,1,length.out = 200), ord = 4)
spline.des(knots=seq(0,1,by=.05), x=seq(0,1,length.out = 200), ord = 4)
spline.des(knots=seq(0,1,by=.05), x=seq(0,1,length.out = 200), ord = 4,outer.ok = TRUE)
bSpline <- spline.des(knots=seq(0,1,by=.05), x=seq(0,1,length.out = 200), ord = 4,outer.ok = TRUE)
dim(bSpline)
class(bSpline)
length(bSpline)
names(bSpline)
dim(bSpline$design)
expand.grid(x=1:200,j=1:17)
data.frame(expand.grid(x=1:200,j=1:17),matrix(bSpline,nrow=200*17,ncol=1))
bS <- data.frame(expand.grid(x=1:200,j=1:17),matrix(bSpline$design,nrow=200*17,ncol=1))
head(bS)
rm(B1)
rm(bSpline)
names(bS)[3] <- "B"
